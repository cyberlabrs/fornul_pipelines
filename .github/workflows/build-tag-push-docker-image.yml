name: Build, tag and push docker image to ECR

on: 
  workflow_call:
    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      ecr_repository:
        required: true
      shared_account_id:
        required: true
      token:
        required: true
      task_definition:
        required: true
      container_name:
        required: true
      ecs_fargate_service:
        required: true
      ecs_fargate_cluster:
        required: true
      node-auth-token:
        required: true

jobs:
  new_version:
    if: github.event.pull_request.merged == true && !contains(github.event.pull_request.labels.*.name, 'no_release')
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.token}}

    - uses: actions/setup-node@v3
      with:
       node-version: 16
       
    - name: Looking for minor changes 
      if:  ${{contains(github.event.pull_request.labels.*.name, 'version:minor')}}
      run: echo "NEW_VERSION=$(npm version minor --no-git-tag-version --tag-version-prefix="")" >> $GITHUB_ENV

    - name: Looking for major changes
      if:  ${{contains(github.event.pull_request.labels.*.name, 'version:major')}}
      run: echo "NEW_VERSION=$(npm version major --no-git-tag-version --tag-version-prefix="")" >> $GITHUB_ENV

    - name: Looking for patch changes
      if: ${{contains(github.event.pull_request.labels.*.name, 'version:patch')}}
      run: echo "NEW_VERSION=$(npm version patch --no-git-tag-version --tag-version-prefix="")" >> $GITHUB_ENV

    - name: Set outputs
      id: output
      run: echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Push tag
      run: |
        git config --global user.email "new_version@fornul.io"
        git config --global user.name "Github Action"
        git tag -a -m "new release" $NEW_VERSION
        git add .
        git commit -m "new version"
        git push origin main -f --tags
    outputs:
      new_version: ${{ steps.output.outputs.new_version}}

  push:
    needs: new_version
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.aws-access-key-id }}
        aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
        aws-region: eu-central-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registries: ${{secrets.shared_account_id}}

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ecr_repository }}
        SERVICE_NAME: ${{ secrets.service_name}}
        NODE_AUTH_TOKEN: ${{ secrets.node-auth-token}}
        IMAGE_TAG: ${{ needs.new_version.outputs.new_version }}
      run: |
        docker build --cache-from=$ECR_REGISTRY/$ECR_REPOSITORY:latest -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg NODE_AUTH_TOKEN=$NODE_AUTH_TOKEN .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  deploy:
    needs: push
    runs-on: ubuntu-latest
    env: 
      IMAGE: ${{ needs.push.outputs.image }}
      TASK_DEFINITION: ${{ secrets.task_definition }}
      CONTAINER_NAME: ${{ secrets.container_name }}
      ECS_FARGATE_SERVICE: ${{ secrets.ecs_fargate_service }}
      ECS_CLUSTER: ${{ secrets.ecs_fargate_cluster }}
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: eu-central-1
        role-duration-seconds: 900
        role-to-assume: arn:aws:iam::959585416967:role/cyberlab-openid-dev/fornul_cicd
    - name: Download task definition
      run: |
          aws ecs describe-task-definition --task-definition $TASK_DEFINITION --query taskDefinition > task-definition.json
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ env.IMAGE }}
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_FARGATE_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
